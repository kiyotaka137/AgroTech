# ration_table_widget.py
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem,
    QPushButton, QComboBox, QLabel, QMessageBox
)
from PyQt6.QtCore import Qt
from PyQt6.QtCore import QTimer
from datetime import date
from PyQt6.QtWidgets import QHeaderView

COLUMNS = [
    "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–°–í %", "–ì–ü –∫–≥" ,"%–ì–ü","%–°–í"
]

INGREDIENT_TYPES = [
    "–°–µ–Ω–æ", "–ö–æ–º–±–∏–∫–æ—Ä–º", "–°–∏–ª–æ—Å", "–°–µ–Ω–∞–∂",
    "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç", "–®—Ä–æ—Ç", "–í–∏—Ç–∞–º–∏–Ω—ã/–ú–∏–Ω–µ—Ä–∞–ª—ã",
    "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è", "–î—Ä—É–≥–æ–µ"
]


class RationTableWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Ü–∏–æ–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é."""

    def __init__(self, parent=None):
        super().__init__(parent)
        self._build_ui()
        self.add_row(default=True)

    def _build_ui(self):
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # === –¢–∞–±–ª–∏—Ü–∞ ===
        self.table = QTableWidget(0, len(COLUMNS))
        self.table.setHorizontalHeaderLabels(COLUMNS)
        self.table.setAlternatingRowColors(True)
        self.table.verticalHeader().setVisible(False)
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
        header = self.table.horizontalHeader()
        header.setStretchLastSection(False)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        for i in range(self.table.columnCount()):
            header.setSectionResizeMode(i, QHeaderView.ResizeMode.Interactive)
        
        self.table.horizontalHeader().setDefaultAlignment(Qt.AlignmentFlag.AlignCenter)
        self.table.setSelectionBehavior(self.table.SelectionBehavior.SelectRows)
        main_layout.addWidget(self.table)

        # === –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å: –∫–Ω–æ–ø–∫–∏ + —Å—Ç–∞—Ç—É—Å ===
        bottom_layout = QHBoxLayout()
        bottom_layout.setContentsMargins(0, 0, 0, 0)
        bottom_layout.setSpacing(10)

        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º
        left_col = QVBoxLayout()
        left_col.setContentsMargins(0, 0, 0, 0)
        left_col.setSpacing(2)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –∫–Ω–æ–ø–æ–∫
        btns_layout = QHBoxLayout()
        btns_layout.setContentsMargins(0, 0, 0, 0)
        btns_layout.setSpacing(8)

        add_btn = self._make_button("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É", self.add_row)
        add_btn.setObjectName("addRowBtn")
        add_btn.setProperty("class", "borderButton")   # üîπ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–º–∫–∏

        remove_btn = self._make_button("–£–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ", self.remove_selected)
        remove_btn.setObjectName("removeRowBtn")
        remove_btn.setProperty("class", "borderButton")  # üîπ —Ä–∞–º–∫–∞

        btns_layout.addWidget(add_btn)
        btns_layout.addWidget(remove_btn)
        btns_layout.addStretch()
        left_col.addLayout(btns_layout)

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥ –∫–Ω–æ–ø–∫–∞–º–∏
        self.status_label = QLabel("–ì–æ—Ç–æ–≤–æ")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignVCenter)
        self.status_label.setStyleSheet("padding-left: 1px; color: #666; font-size: 12px;")
        left_col.addWidget(self.status_label)

        bottom_layout.addLayout(left_col)
        bottom_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å" —Å–ø—Ä–∞–≤–∞
        analyze_btn = QPushButton("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
        analyze_btn.setProperty("primary", True)
        analyze_btn.setFixedSize(160, 36)  # üîπ —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä

        analyze_btn.clicked.connect(self.analyze_clicked)

        # –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ –∏ —Å–Ω–∏–∑—É
        bottom_layout.addStretch()  # —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–∂–∞–ª–∞—Å—å –∫ –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
        bottom_layout.addWidget(analyze_btn)
        bottom_layout.setContentsMargins(5, 5, 5, 5)  
        
        main_layout.addLayout(bottom_layout)
        
        # –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
        QTimer.singleShot(0, self.setup_columns_ratio)

    def setup_columns_ratio(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ 4:1:1:1:1"""
        if self.table.width() == 0:
            QTimer.singleShot(10, self.setup_columns_ratio)
            return
            
        total_width = self.table.width()
        column_count = self.table.columnCount()
        
        first_col_width = int(total_width * 4 / 8)
        other_col_width = int(total_width * 1 / 8)
        
        self.table.setColumnWidth(0, first_col_width)
        for i in range(1, 5):
            self.table.setColumnWidth(i, other_col_width)

    def _make_button(self, text, slot):
        b = QPushButton(text)
        b.clicked.connect(slot)
        return b


    def add_row(self, default=False):
        row = self.table.rowCount()
        self.table.insertRow(row)

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
        self.setup_columns_ratio()
        
        for c, col_name in enumerate(COLUMNS):
            item = QTableWidgetItem("")
            item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
            self.table.setItem(row, c, item)

        self.status_label.setText(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row + 1}")

    def remove_selected(self):
        selected = self.table.selectionModel().selectedRows()
        if not selected:
            QMessageBox.information(self, "–£–¥–∞–ª–µ–Ω–∏–µ", "–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.")
            return

        rows = sorted([idx.row() for idx in selected], reverse=True)
        for row in rows:
            self.table.removeRow(row)
        self.status_label.setText(f"–£–¥–∞–ª–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫(–∏)")

    # === JSON API ===
    def load_from_json(self, ration_data):
        """
        –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏–∑ –º–∞—Å—Å–∏–≤–∞ JSON.
        ration_data –º–æ–∂–µ—Ç –±—ã—Ç—å:
        - {"rows": [...]} ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        - [[...], [...]] ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
        """
        # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º "rows"
        if isinstance(ration_data, dict) and "rows" in ration_data:
            ration_data = ration_data["rows"]

        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
        normalized_data = []
        for row in ration_data:
            if isinstance(row, dict):
                normalized_data.append([row.get(col, "") for col in COLUMNS])
            else:
                normalized_data.append(row)

        self.table.setRowCount(0)
        for row_data in normalized_data:
            self.add_row(default=False)
            row = self.table.rowCount() - 1
            for c, col_name in enumerate(COLUMNS):
                value = row_data[c] if c < len(row_data) else ""
                item = self.table.item(row, c)
                if item:
                    item.setText(str(value))

        self.status_label.setText(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(normalized_data)} —Å—Ç—Ä–æ–∫")
        QTimer.singleShot(0, self.setup_columns_ratio)

    def to_json(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤"""
        data = []
        for r in range(self.table.rowCount()):
            row = []
            for c, col_name in enumerate(COLUMNS):
                if col_name == "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã":
                    cb = self.table.cellWidget(r, c)
                    row.append(cb.currentText() if cb else "")
                else:
                    item = self.table.item(r, c)
                    row.append(item.text() if item else "")
            data.append(row)
        return data

    # === –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ ===
    def analyze_clicked(self):
        rows = self.table.rowCount()
        QMessageBox.information(self, "–ê–Ω–∞–ª–∏–∑", f"–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–Ω–∞–ª–∏–∑ –¥–ª—è {rows} —Å—Ç—Ä–æ–∫.")
    
    def resizeEvent(self, event):
        """–ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã"""
        super().resizeEvent(event)
        QTimer.singleShot(10, self.setup_columns_ratio)